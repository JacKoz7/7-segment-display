
ATmega8A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f6  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030f  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000237  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	3f 73       	andi	r19, 0x3F	; 63
  28:	79 37       	cpi	r23, 0x79	; 121
  2a:	00 00       	nop
  2c:	00 39       	cpi	r16, 0x90	; 144
  2e:	38 3f       	cpi	r19, 0xF8	; 248
  30:	6d 79       	andi	r22, 0x9D	; 157
  32:	5e 00       	.word	0x005e	; ????

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf e5       	ldi	r28, 0x5F	; 95
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	02 d0       	rcall	.+4      	; 0x46 <main>
  42:	a0 c0       	rjmp	.+320    	; 0x184 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <main>:
	{0b00111001, 0b00111000, 0b00111111, 0b01101101, 0b01111001, 0b01011110, 0} // CLOSED
};

int main(void) {
	// Configure I/O ports
	DDRD = 0xFF;  // Set PORTD as output for segments
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	81 bb       	out	0x11, r24	; 17
	DDRC |= 0x0F; // Set lower 4 bits of PORTC as output for digit selection
  4a:	84 b3       	in	r24, 0x14	; 20
  4c:	8f 60       	ori	r24, 0x0F	; 15
  4e:	84 bb       	out	0x14, r24	; 20
	DDRB &= ~(1 << PB0); // Set PB0 as input for button
  50:	87 b3       	in	r24, 0x17	; 23
  52:	8e 7f       	andi	r24, 0xFE	; 254
  54:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << PB0); // Enable pull-up resistor for PB0
  56:	88 b3       	in	r24, 0x18	; 24
  58:	81 60       	ori	r24, 0x01	; 1
  5a:	88 bb       	out	0x18, r24	; 24

	// Initialize variables
	uint8_t i = 0, state = 0, last_button = 0, button_pressed = 0;
  5c:	f1 2c       	mov	r15, r1
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	c0 e0       	ldi	r28, 0x00	; 0
  62:	d0 e0       	ldi	r29, 0x00	; 0
	
	while (1) {
		// Read button state (active low)
		uint8_t button = !(PINB & (1 << PB0));
  64:	86 b3       	in	r24, 0x16	; 22
  66:	01 e0       	ldi	r16, 0x01	; 1
  68:	98 2f       	mov	r25, r24
  6a:	91 70       	andi	r25, 0x01	; 1
  6c:	80 fd       	sbrc	r24, 0
  6e:	00 e0       	ldi	r16, 0x00	; 0
		
		// Button press detection with debouncing
		if (button && !last_button) {
  70:	91 11       	cpse	r25, r1
  72:	0b c0       	rjmp	.+22     	; 0x8a <main+0x44>
  74:	21 11       	cpse	r18, r1
  76:	09 c0       	rjmp	.+18     	; 0x8a <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	83 ec       	ldi	r24, 0xC3	; 195
  7a:	99 e0       	ldi	r25, 0x09	; 9
  7c:	01 97       	sbiw	r24, 0x01	; 1
  7e:	f1 f7       	brne	.-4      	; 0x7c <main+0x36>
  80:	00 c0       	rjmp	.+0      	; 0x82 <main+0x3c>
  82:	00 00       	nop
			_delay_ms(10); // Debounce 
			button_pressed = 1;
  84:	ff 24       	eor	r15, r15
  86:	f3 94       	inc	r15
  88:	10 c0       	rjmp	.+32     	; 0xaa <main+0x64>
			} else if (!button && last_button) {
  8a:	99 23       	and	r25, r25
  8c:	71 f0       	breq	.+28     	; 0xaa <main+0x64>
  8e:	22 23       	and	r18, r18
  90:	61 f0       	breq	.+24     	; 0xaa <main+0x64>
  92:	83 ec       	ldi	r24, 0xC3	; 195
  94:	99 e0       	ldi	r25, 0x09	; 9
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x50>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x56>
  9c:	00 00       	nop
			_delay_ms(10); // Debounce delay for button release
			if (button_pressed) {
  9e:	ff 20       	and	r15, r15
  a0:	21 f0       	breq	.+8      	; 0xaa <main+0x64>
				state ^= 1; // Toggle state between OPEN and CLOSED
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	c8 27       	eor	r28, r24
				i = 0;      // Reset display index
				button_pressed = 0;
  a6:	f1 2c       	mov	r15, r1
			button_pressed = 1;
			} else if (!button && last_button) {
			_delay_ms(10); // Debounce delay for button release
			if (button_pressed) {
				state ^= 1; // Toggle state between OPEN and CLOSED
				i = 0;      // Reset display index
  a8:	d0 e0       	ldi	r29, 0x00	; 0
			}
		}
		last_button = button;

		// Display loop
		for (uint8_t k = 0; k < 50; k++) {
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	34 c0       	rjmp	.+104    	; 0x116 <main+0xd0>
			for (uint8_t j = 0; j < 4; j++) {
				PORTD = 0x00; // Turn off all segments
  ae:	12 ba       	out	0x12, r1	; 18
				PORTC = ~(1 << j); // Select digit (active low)
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	04 2e       	mov	r0, r20
  b6:	02 c0       	rjmp	.+4      	; 0xbc <main+0x76>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <main+0x72>
  c0:	20 95       	com	r18
  c2:	25 bb       	out	0x15, r18	; 21
				// Display appropriate segment pattern
				PORTD = pgm_read_byte(&segments[state][(i + j) % (state ? 0x7 : 0x5)]);
  c4:	2c 2f       	mov	r18, r28
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	8d 2f       	mov	r24, r29
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	84 0f       	add	r24, r20
  ce:	91 1d       	adc	r25, r1
  d0:	cc 23       	and	r28, r28
  d2:	19 f0       	breq	.+6      	; 0xda <main+0x94>
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x98>
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	2b d0       	rcall	.+86     	; 0x136 <__divmodhi4>
  e0:	f9 01       	movw	r30, r18
  e2:	ee 0f       	add	r30, r30
  e4:	ff 1f       	adc	r31, r31
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e2 1b       	sub	r30, r18
  f0:	f3 0b       	sbc	r31, r19
  f2:	e8 0f       	add	r30, r24
  f4:	f9 1f       	adc	r31, r25
  f6:	ea 5d       	subi	r30, 0xDA	; 218
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	e4 91       	lpm	r30, Z
  fc:	e2 bb       	out	0x12, r30	; 18
  fe:	89 ef       	ldi	r24, 0xF9	; 249
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0xbc>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0xc2>
 108:	00 00       	nop
		}
		last_button = button;

		// Display loop
		for (uint8_t k = 0; k < 50; k++) {
			for (uint8_t j = 0; j < 4; j++) {
 10a:	4f 5f       	subi	r20, 0xFF	; 255
 10c:	01 c0       	rjmp	.+2      	; 0x110 <main+0xca>
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	44 30       	cpi	r20, 0x04	; 4
 112:	68 f2       	brcs	.-102    	; 0xae <main+0x68>
			}
		}
		last_button = button;

		// Display loop
		for (uint8_t k = 0; k < 50; k++) {
 114:	1f 5f       	subi	r17, 0xFF	; 255
 116:	12 33       	cpi	r17, 0x32	; 50
 118:	d0 f3       	brcs	.-12     	; 0x10e <main+0xc8>
				_delay_ms(1);
			}
		}
		
		// Move to next character in the sequence
		i = (i + 1) % (state ? 0x7 : 0x5);
 11a:	8d 2f       	mov	r24, r29
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	cc 23       	and	r28, r28
 122:	19 f0       	breq	.+6      	; 0x12a <main+0xe4>
 124:	67 e0       	ldi	r22, 0x07	; 7
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <main+0xe8>
 12a:	65 e0       	ldi	r22, 0x05	; 5
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	03 d0       	rcall	.+6      	; 0x136 <__divmodhi4>
 130:	d8 2f       	mov	r29, r24
				state ^= 1; // Toggle state between OPEN and CLOSED
				i = 0;      // Reset display index
				button_pressed = 0;
			}
		}
		last_button = button;
 132:	20 2f       	mov	r18, r16
			}
		}
		
		// Move to next character in the sequence
		i = (i + 1) % (state ? 0x7 : 0x5);
	}
 134:	97 cf       	rjmp	.-210    	; 0x64 <main+0x1e>

00000136 <__divmodhi4>:
 136:	97 fb       	bst	r25, 7
 138:	07 2e       	mov	r0, r23
 13a:	16 f4       	brtc	.+4      	; 0x140 <__divmodhi4+0xa>
 13c:	00 94       	com	r0
 13e:	06 d0       	rcall	.+12     	; 0x14c <__divmodhi4_neg1>
 140:	77 fd       	sbrc	r23, 7
 142:	08 d0       	rcall	.+16     	; 0x154 <__divmodhi4_neg2>
 144:	0b d0       	rcall	.+22     	; 0x15c <__udivmodhi4>
 146:	07 fc       	sbrc	r0, 7
 148:	05 d0       	rcall	.+10     	; 0x154 <__divmodhi4_neg2>
 14a:	3e f4       	brtc	.+14     	; 0x15a <__divmodhi4_exit>

0000014c <__divmodhi4_neg1>:
 14c:	90 95       	com	r25
 14e:	81 95       	neg	r24
 150:	9f 4f       	sbci	r25, 0xFF	; 255
 152:	08 95       	ret

00000154 <__divmodhi4_neg2>:
 154:	70 95       	com	r23
 156:	61 95       	neg	r22
 158:	7f 4f       	sbci	r23, 0xFF	; 255

0000015a <__divmodhi4_exit>:
 15a:	08 95       	ret

0000015c <__udivmodhi4>:
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	51 e1       	ldi	r21, 0x11	; 17
 162:	07 c0       	rjmp	.+14     	; 0x172 <__udivmodhi4_ep>

00000164 <__udivmodhi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	a6 17       	cp	r26, r22
 16a:	b7 07       	cpc	r27, r23
 16c:	10 f0       	brcs	.+4      	; 0x172 <__udivmodhi4_ep>
 16e:	a6 1b       	sub	r26, r22
 170:	b7 0b       	sbc	r27, r23

00000172 <__udivmodhi4_ep>:
 172:	88 1f       	adc	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	5a 95       	dec	r21
 178:	a9 f7       	brne	.-22     	; 0x164 <__udivmodhi4_loop>
 17a:	80 95       	com	r24
 17c:	90 95       	com	r25
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	08 95       	ret

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
